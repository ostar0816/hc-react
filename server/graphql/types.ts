import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  viewer?: GQLViewer;
}

export interface GQLViewer {
  _id: GQLObjectId;
  user?: GQLUser;
  studyDescriptions?: Array<GQLStudyDescription | null>;
  facilities?: Array<GQLFacility | null>;
  reportTemplates?: Array<GQLReportTemplate | null>;
  userRoles?: Array<GQLUserRole | null>;
  users?: Array<GQLUser | null>;
  searchFacilityById?: GQLFacility;
  searchStudies?: GQLStudySearchResult;
  searchStudyById?: GQLStudy;
  searchUserById?: GQLUser;
}

/**
 * Id representation, based on Mongo Object Ids
 */
export type GQLObjectId = ObjectId;

export interface GQLUser {
  _id: GQLObjectId;
  firstName?: string;
  lastName?: string;
  email: string;
  workspaces?: Array<GQLWorkspace | null>;
  worklists?: Array<GQLWorklist | null>;
  userRole?: GQLUserRole;
  assignedFacilities: Array<GQLFacility | null>;
  allowedFacilities: Array<GQLFacility | null>;
  assignPriorities?: Array<GQLAssignPriority | null>;
  pendingStudies?: Array<GQLStudy | null>;
  online: boolean;
  radiologyCapacity?: number;
}

export interface GQLWorkspace {
  _id: GQLObjectId;
  layout?: GQLJSON;
}

/**
 * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
 */
export type GQLJSON = any;

export interface GQLWorklist {
  _id: GQLObjectId;
  name: string;
  displayOnTop: boolean;
  description?: string;
  sorting?: Array<GQLSortType | null>;
  columns?: Array<GQLColumn | null>;
  totalCount?: number;
}

export interface GQLSortType {
  order: number;
  columnName: string;
}

export interface GQLColumn {
  key: string;
  width: number;
  filter?: GQLFilter;
}

export interface GQLFilter {
  type: GQLFilterEnum;
  stringValue?: string;
  numberValue?: number;
  startDate?: GQLDate;
  endDate?: GQLDate;
  datePreset?: string;
}

export enum GQLFilterEnum {
  CONTAINS_STRING = 'CONTAINS_STRING',
  EQUAL_NUMBER = 'EQUAL_NUMBER',
  DATE_RANGE = 'DATE_RANGE',
  DATE_PRESET = 'DATE_PRESET'
}

/**
 * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDate = any;

export interface GQLUserRole {
  _id: GQLObjectId;
  name: string;
  description: string;
  permissions?: Array<GQLPermissionEnum | null>;
}

export enum GQLPermissionEnum {
  LIST_ALL_STUDIES = 'LIST_ALL_STUDIES',
  LIST_ALLOWED_STUDIES = 'LIST_ALLOWED_STUDIES',
  LIST_STUDIES_ASSIGNED_TO_ME = 'LIST_STUDIES_ASSIGNED_TO_ME',
  ASSIGN_STUDY = 'ASSIGN_STUDY',
  CONFIRM_STUDY = 'CONFIRM_STUDY',
  OPEN_REPORT_WINDOW = 'OPEN_REPORT_WINDOW',
  SIGN_OFF_STUDY = 'SIGN_OFF_STUDY',
  RESOLVE_SUPPORT_REQUEST = 'RESOLVE_SUPPORT_REQUEST'
}

export interface GQLFacility {
  _id: GQLObjectId;
  institutionName: string;
  address?: string;
  city?: string;
  state?: string;
  zip?: string;
  websiteUrl?: string;
  faxNumber?: string;
  phoneNumber?: string;
  email?: string;
  dicomDetails?: GQLFacilityDicomDetails;
  techConf?: GQLFacilityTechConf;
  referringPhysicians?: Array<GQLReferringPhysician | null>;
}

export interface GQLFacilityDicomDetails {
  AETitle?: string;
}

export interface GQLFacilityTechConf {
  contrastRequirements: Array<GQLContrastRequirement>;
  readType?: GQLReadTypeEnum;
  tatLimits: Array<GQLTATLimit>;
}

export interface GQLContrastRequirement {
  modality: GQLModalityEnum;
  requirement: GQLContrastRequirementsEnum;
}

export enum GQLModalityEnum {
  CT = 'CT',
  MR = 'MR',
  CR = 'CR',
  DX = 'DX',
  XR = 'XR',
  US = 'US',
  PET = 'PET',
  MG = 'MG',
  NM = 'NM'
}

export enum GQLContrastRequirementsEnum {
  NEVER_SEEN = 'NEVER_SEEN',
  OPTIONAL = 'OPTIONAL',
  REQUIRED = 'REQUIRED'
}

export enum GQLReadTypeEnum {
  PRELIM = 'PRELIM',
  PRELIM_OR_FINAL = 'PRELIM_OR_FINAL',
  FINAL = 'FINAL'
}

export interface GQLTATLimit {
  timeSeconds: number;
  studyPriority: GQLStudyPriorityEnum;
}

export enum GQLStudyPriorityEnum {
  STAT = 'STAT',
  URGENT = 'URGENT',
  CRITICAL = 'CRITICAL',
  ROUTINE = 'ROUTINE',
  STROKE = 'STROKE'
}

export interface GQLReferringPhysician {
  _id: GQLObjectId;
  physicianUid: string;
  name: string;
  email: string;
  phone: string;
  fax?: string;
  dicomValue?: string;
}

export interface GQLAssignPriority {
  studyDescriptionNameRegex: string;
  studyDescriptionModalityRegex: string;
  facilityNameRegex: string;
  studyPriorityRegex: string;
  assignPriority: GQLAssignPriorityEnum;
}

export enum GQLAssignPriorityEnum {
  ZERO = 'ZERO',
  PLUS_ONE = 'PLUS_ONE',
  PLUS_TWO = 'PLUS_TWO',
  MINUS_ONE = 'MINUS_ONE',
  MINUS_TWO = 'MINUS_TWO',
  NEVER = 'NEVER'
}

export interface GQLStudy {
  _id: GQLObjectId;
  canBeAssignedTo?: Array<GQLAssignOption | null>;
  assignedTo?: GQLUser;
  contrastPresent?: GQLContrastPresentEnum;
  contrastType?: string;
  studyDescription?: GQLStudyDescription;
  facility?: GQLFacility;
  referringPhysicians?: Array<GQLReferringPhysician | null>;
  priorStudies: Array<GQLStudy | null>;
  notes?: Array<GQLStudyNote | null>;
  report?: GQLReport;
  addendums: Array<GQLReport>;
  arriveTimeStart?: GQLDateTime;
  AETitle?: string;
  patientName?: string;
  assignedRadiologistName?: string;
  patientDOB?: GQLDate;
  patientSex?: string;
  patientId?: string;
  accessionNumber?: string;
  studyDescriptionString?: string;
  stationName?: string;
  modality?: string;
  studyStatus?: GQLStudyStatusEnum;
  readType?: string;
  laterality?: GQLStudyLateralityEnum;
  history?: string;
  studyDate?: GQLDate;
  studyPriority?: GQLStudyPriorityEnum;
  noOfImages?: number;
  facilityName?: string;
  reportSignedOffDate?: GQLDateTime;
  supportRequestStatus?: GQLStudySupportRequestStatusEnum;
  tatLimitDate?: GQLDateTime;
}

export interface GQLAssignOption {
  radiologist: GQLUser;
  assignPriority: GQLAssignPriorityEnum;
}

export enum GQLContrastPresentEnum {
  NOT_SELECTED = 'NOT_SELECTED',
  YES = 'YES',
  NO = 'NO'
}

export interface GQLStudyDescription {
  _id: GQLObjectId;
  name: string;
  modality?: GQLModalityEnum;
  contrast?: GQLContrastEnum;
  reportTemplate?: GQLReportTemplate;
}

export enum GQLContrastEnum {
  NA = 'NA',
  W = 'W',
  WO = 'WO',
  W_WO = 'W_WO'
}

export interface GQLReportTemplate {
  _id: GQLObjectId;
  name: string;
  description: string;
  template: GQLJSON;
}

export interface GQLStudyNote {
  _id: GQLObjectId;
  type?: GQLNoteTypeEnum;
  title: string;
  messages: Array<GQLStudyNoteMessage | null>;
  resolved?: boolean;
}

export enum GQLNoteTypeEnum {
  SUPPORT_STUDY_REQUEST = 'SUPPORT_STUDY_REQUEST',
  SUPPORT_URGENCY_REQUEST = 'SUPPORT_URGENCY_REQUEST'
}

export interface GQLStudyNoteMessage {
  createdBy: GQLUser;
  createdTime?: GQLDateTime;
  text?: string;
}

/**
 * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDateTime = any;

export interface GQLReport {
  content: GQLJSON;
  signedOffDate?: GQLDateTime;
}

export enum GQLStudyStatusEnum {
  NEW = 'NEW',
  CONFIRMED = 'CONFIRMED',
  ASSIGNED = 'ASSIGNED',
  SIGNED_OFF = 'SIGNED_OFF'
}

export enum GQLStudyLateralityEnum {
  NOT_SELECTED = 'NOT_SELECTED',
  LEFT = 'LEFT',
  RIGHT = 'RIGHT'
}

export enum GQLStudySupportRequestStatusEnum {
  NONE = 'NONE',
  PENDING = 'PENDING',
  RESOLVED = 'RESOLVED'
}

export interface GQLSearchSortInput {
  columnName: string;
  order?: number;
}

export interface GQLSearchFilterInput {
  columnName: string;
  type: GQLFilterEnum;
  stringValue?: string;
  numberValue?: number;
  startDate?: GQLDate;
  endDate?: GQLDate;
  datePreset?: string;
}

export interface GQLStudySearchResult {
  totalCount: number;
  studies?: Array<GQLStudy | null>;
}

export interface GQLMutation {
  login?: GQLQuery;
  logout?: GQLQuery;
  addWorklist?: GQLQuery;
  updateWorklist?: GQLQuery;
  updateWorklistDisplayOnTop?: GQLQuery;
  deleteWorklist?: GQLQuery;
  updateWorkspace?: GQLQuery;
  addStudyDescription?: GQLQuery;
  deleteStudyDescription?: GQLQuery;
  updateStudyDescription?: GQLStudyDescription;
  addReportTemplate?: GQLQuery;
  updateReportTemplate?: GQLReportTemplate;
  addUserRole?: GQLQuery;
  updateUserRole?: GQLUserRole;
  addUser?: GQLQuery;
  updateUser?: GQLUser;
  updateUserRolePermissions?: GQLQuery;
  deleteReportTemplate?: GQLQuery;
  addFacility?: GQLQuery;
  updateFacility?: GQLFacility;
  deleteFacility?: GQLQuery;
  addReferringPhysician?: GQLFacility;
  updateReferringPhysician?: GQLReferringPhysician;
  deleteReferringPhysician?: GQLFacility;
  updateFacilityTechConf?: GQLFacility;
  updateFacilityDicomDetails?: GQLFacility;
  confirmStudy?: GQLStudy;
  updateAssignPriorities?: GQLUser;
  assignStudiesToRadiologist?: GQLUser;
  updateAllowedFacilitiesForUser?: GQLUser;
  signOffReport?: GQLStudy;
  signOffAddendum?: GQLStudy;
  addStudyNote?: GQLStudy;
  addStudyNoteMessage?: GQLStudy;
  updateStudyFacility: Array<GQLStudy>;
}

export interface GQLSortInput {
  columnName: string;
  order: number;
}

export interface GQLColumnInput {
  key: string;
  width: number;
  filter?: GQLFilterInput;
}

export interface GQLFilterInput {
  type: GQLFilterEnum;
  stringValue?: string;
  numberValue?: number;
  startDate?: GQLDate;
  endDate?: GQLDate;
  datePreset?: string;
}

export interface GQLUserRolePermissionsInput {
  userRoleId: GQLObjectId;
  permissions: Array<GQLPermissionEnum | null>;
}

export interface GQLContrastRequirementsInput {
  modality: GQLModalityEnum;
  requirement: GQLContrastRequirementsEnum;
}

export interface GQLTATLimitInput {
  timeSeconds: number;
  studyPriority: GQLStudyPriorityEnum;
}

export interface GQLAssignPriorityInput {
  studyDescriptionNameRegex: string;
  studyDescriptionModalityRegex: string;
  facilityNameRegex: string;
  studyPriorityRegex: string;
  assignPriority: GQLAssignPriorityEnum;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Viewer?: GQLViewerTypeResolver;
  ObjectId?: GraphQLScalarType;
  User?: GQLUserTypeResolver;
  Workspace?: GQLWorkspaceTypeResolver;
  JSON?: GraphQLScalarType;
  Worklist?: GQLWorklistTypeResolver;
  SortType?: GQLSortTypeTypeResolver;
  Column?: GQLColumnTypeResolver;
  Filter?: GQLFilterTypeResolver;
  Date?: GraphQLScalarType;
  UserRole?: GQLUserRoleTypeResolver;
  Facility?: GQLFacilityTypeResolver;
  FacilityDicomDetails?: GQLFacilityDicomDetailsTypeResolver;
  FacilityTechConf?: GQLFacilityTechConfTypeResolver;
  ContrastRequirement?: GQLContrastRequirementTypeResolver;
  TATLimit?: GQLTATLimitTypeResolver;
  ReferringPhysician?: GQLReferringPhysicianTypeResolver;
  AssignPriority?: GQLAssignPriorityTypeResolver;
  Study?: GQLStudyTypeResolver;
  AssignOption?: GQLAssignOptionTypeResolver;
  StudyDescription?: GQLStudyDescriptionTypeResolver;
  ReportTemplate?: GQLReportTemplateTypeResolver;
  StudyNote?: GQLStudyNoteTypeResolver;
  StudyNoteMessage?: GQLStudyNoteMessageTypeResolver;
  DateTime?: GraphQLScalarType;
  Report?: GQLReportTypeResolver;
  StudySearchResult?: GQLStudySearchResultTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  viewer?: QueryToViewerResolver<TParent>;
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLViewerTypeResolver<TParent = any> {
  _id?: ViewerTo_idResolver<TParent>;
  user?: ViewerToUserResolver<TParent>;
  studyDescriptions?: ViewerToStudyDescriptionsResolver<TParent>;
  facilities?: ViewerToFacilitiesResolver<TParent>;
  reportTemplates?: ViewerToReportTemplatesResolver<TParent>;
  userRoles?: ViewerToUserRolesResolver<TParent>;
  users?: ViewerToUsersResolver<TParent>;
  searchFacilityById?: ViewerToSearchFacilityByIdResolver<TParent>;
  searchStudies?: ViewerToSearchStudiesResolver<TParent>;
  searchStudyById?: ViewerToSearchStudyByIdResolver<TParent>;
  searchUserById?: ViewerToSearchUserByIdResolver<TParent>;
}

export interface ViewerTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToStudyDescriptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToFacilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToReportTemplatesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToUserRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToSearchFacilityByIdArgs {
  facilityId?: GQLObjectId;
}
export interface ViewerToSearchFacilityByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ViewerToSearchFacilityByIdArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToSearchStudiesArgs {
  skip: number;
  limit: number;
  sorting?: Array<GQLSearchSortInput | null>;
  filters?: Array<GQLSearchFilterInput | null>;
}
export interface ViewerToSearchStudiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ViewerToSearchStudiesArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToSearchStudyByIdArgs {
  studyId?: GQLObjectId;
}
export interface ViewerToSearchStudyByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ViewerToSearchStudyByIdArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ViewerToSearchUserByIdArgs {
  userId?: GQLObjectId;
}
export interface ViewerToSearchUserByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ViewerToSearchUserByIdArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  _id?: UserTo_idResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  workspaces?: UserToWorkspacesResolver<TParent>;
  worklists?: UserToWorklistsResolver<TParent>;
  userRole?: UserToUserRoleResolver<TParent>;
  assignedFacilities?: UserToAssignedFacilitiesResolver<TParent>;
  allowedFacilities?: UserToAllowedFacilitiesResolver<TParent>;
  assignPriorities?: UserToAssignPrioritiesResolver<TParent>;
  pendingStudies?: UserToPendingStudiesResolver<TParent>;
  online?: UserToOnlineResolver<TParent>;
  radiologyCapacity?: UserToRadiologyCapacityResolver<TParent>;
}

export interface UserTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToWorkspacesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToWorklistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToUserRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToAssignedFacilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToAllowedFacilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToAssignPrioritiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToPendingStudiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToOnlineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserToRadiologyCapacityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceTypeResolver<TParent = any> {
  _id?: WorkspaceTo_idResolver<TParent>;
  layout?: WorkspaceToLayoutResolver<TParent>;
}

export interface WorkspaceTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceToLayoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorklistTypeResolver<TParent = any> {
  _id?: WorklistTo_idResolver<TParent>;
  name?: WorklistToNameResolver<TParent>;
  displayOnTop?: WorklistToDisplayOnTopResolver<TParent>;
  description?: WorklistToDescriptionResolver<TParent>;
  sorting?: WorklistToSortingResolver<TParent>;
  columns?: WorklistToColumnsResolver<TParent>;
  totalCount?: WorklistToTotalCountResolver<TParent>;
}

export interface WorklistTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorklistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorklistToDisplayOnTopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorklistToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorklistToSortingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorklistToColumnsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface WorklistToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLSortTypeTypeResolver<TParent = any> {
  order?: SortTypeToOrderResolver<TParent>;
  columnName?: SortTypeToColumnNameResolver<TParent>;
}

export interface SortTypeToOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface SortTypeToColumnNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLColumnTypeResolver<TParent = any> {
  key?: ColumnToKeyResolver<TParent>;
  width?: ColumnToWidthResolver<TParent>;
  filter?: ColumnToFilterResolver<TParent>;
}

export interface ColumnToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ColumnToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ColumnToFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLFilterTypeResolver<TParent = any> {
  type?: FilterToTypeResolver<TParent>;
  stringValue?: FilterToStringValueResolver<TParent>;
  numberValue?: FilterToNumberValueResolver<TParent>;
  startDate?: FilterToStartDateResolver<TParent>;
  endDate?: FilterToEndDateResolver<TParent>;
  datePreset?: FilterToDatePresetResolver<TParent>;
}

export interface FilterToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FilterToStringValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FilterToNumberValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FilterToStartDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FilterToEndDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FilterToDatePresetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserRoleTypeResolver<TParent = any> {
  _id?: UserRoleTo_idResolver<TParent>;
  name?: UserRoleToNameResolver<TParent>;
  description?: UserRoleToDescriptionResolver<TParent>;
  permissions?: UserRoleToPermissionsResolver<TParent>;
}

export interface UserRoleTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserRoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserRoleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface UserRoleToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLFacilityTypeResolver<TParent = any> {
  _id?: FacilityTo_idResolver<TParent>;
  institutionName?: FacilityToInstitutionNameResolver<TParent>;
  address?: FacilityToAddressResolver<TParent>;
  city?: FacilityToCityResolver<TParent>;
  state?: FacilityToStateResolver<TParent>;
  zip?: FacilityToZipResolver<TParent>;
  websiteUrl?: FacilityToWebsiteUrlResolver<TParent>;
  faxNumber?: FacilityToFaxNumberResolver<TParent>;
  phoneNumber?: FacilityToPhoneNumberResolver<TParent>;
  email?: FacilityToEmailResolver<TParent>;
  dicomDetails?: FacilityToDicomDetailsResolver<TParent>;
  techConf?: FacilityToTechConfResolver<TParent>;
  referringPhysicians?: FacilityToReferringPhysiciansResolver<TParent>;
}

export interface FacilityTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToInstitutionNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToZipResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToFaxNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToPhoneNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToDicomDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToTechConfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityToReferringPhysiciansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLFacilityDicomDetailsTypeResolver<TParent = any> {
  AETitle?: FacilityDicomDetailsToAETitleResolver<TParent>;
}

export interface FacilityDicomDetailsToAETitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLFacilityTechConfTypeResolver<TParent = any> {
  contrastRequirements?: FacilityTechConfToContrastRequirementsResolver<TParent>;
  readType?: FacilityTechConfToReadTypeResolver<TParent>;
  tatLimits?: FacilityTechConfToTatLimitsResolver<TParent>;
}

export interface FacilityTechConfToContrastRequirementsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityTechConfToReadTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface FacilityTechConfToTatLimitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLContrastRequirementTypeResolver<TParent = any> {
  modality?: ContrastRequirementToModalityResolver<TParent>;
  requirement?: ContrastRequirementToRequirementResolver<TParent>;
}

export interface ContrastRequirementToModalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ContrastRequirementToRequirementResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLTATLimitTypeResolver<TParent = any> {
  timeSeconds?: TATLimitToTimeSecondsResolver<TParent>;
  studyPriority?: TATLimitToStudyPriorityResolver<TParent>;
}

export interface TATLimitToTimeSecondsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface TATLimitToStudyPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLReferringPhysicianTypeResolver<TParent = any> {
  _id?: ReferringPhysicianTo_idResolver<TParent>;
  physicianUid?: ReferringPhysicianToPhysicianUidResolver<TParent>;
  name?: ReferringPhysicianToNameResolver<TParent>;
  email?: ReferringPhysicianToEmailResolver<TParent>;
  phone?: ReferringPhysicianToPhoneResolver<TParent>;
  fax?: ReferringPhysicianToFaxResolver<TParent>;
  dicomValue?: ReferringPhysicianToDicomValueResolver<TParent>;
}

export interface ReferringPhysicianTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReferringPhysicianToPhysicianUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReferringPhysicianToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReferringPhysicianToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReferringPhysicianToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReferringPhysicianToFaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReferringPhysicianToDicomValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssignPriorityTypeResolver<TParent = any> {
  studyDescriptionNameRegex?: AssignPriorityToStudyDescriptionNameRegexResolver<TParent>;
  studyDescriptionModalityRegex?: AssignPriorityToStudyDescriptionModalityRegexResolver<TParent>;
  facilityNameRegex?: AssignPriorityToFacilityNameRegexResolver<TParent>;
  studyPriorityRegex?: AssignPriorityToStudyPriorityRegexResolver<TParent>;
  assignPriority?: AssignPriorityToAssignPriorityResolver<TParent>;
}

export interface AssignPriorityToStudyDescriptionNameRegexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface AssignPriorityToStudyDescriptionModalityRegexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface AssignPriorityToFacilityNameRegexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface AssignPriorityToStudyPriorityRegexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface AssignPriorityToAssignPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLStudyTypeResolver<TParent = any> {
  _id?: StudyTo_idResolver<TParent>;
  canBeAssignedTo?: StudyToCanBeAssignedToResolver<TParent>;
  assignedTo?: StudyToAssignedToResolver<TParent>;
  contrastPresent?: StudyToContrastPresentResolver<TParent>;
  contrastType?: StudyToContrastTypeResolver<TParent>;
  studyDescription?: StudyToStudyDescriptionResolver<TParent>;
  facility?: StudyToFacilityResolver<TParent>;
  referringPhysicians?: StudyToReferringPhysiciansResolver<TParent>;
  priorStudies?: StudyToPriorStudiesResolver<TParent>;
  notes?: StudyToNotesResolver<TParent>;
  report?: StudyToReportResolver<TParent>;
  addendums?: StudyToAddendumsResolver<TParent>;
  arriveTimeStart?: StudyToArriveTimeStartResolver<TParent>;
  AETitle?: StudyToAETitleResolver<TParent>;
  patientName?: StudyToPatientNameResolver<TParent>;
  assignedRadiologistName?: StudyToAssignedRadiologistNameResolver<TParent>;
  patientDOB?: StudyToPatientDOBResolver<TParent>;
  patientSex?: StudyToPatientSexResolver<TParent>;
  patientId?: StudyToPatientIdResolver<TParent>;
  accessionNumber?: StudyToAccessionNumberResolver<TParent>;
  studyDescriptionString?: StudyToStudyDescriptionStringResolver<TParent>;
  stationName?: StudyToStationNameResolver<TParent>;
  modality?: StudyToModalityResolver<TParent>;
  studyStatus?: StudyToStudyStatusResolver<TParent>;
  readType?: StudyToReadTypeResolver<TParent>;
  laterality?: StudyToLateralityResolver<TParent>;
  history?: StudyToHistoryResolver<TParent>;
  studyDate?: StudyToStudyDateResolver<TParent>;
  studyPriority?: StudyToStudyPriorityResolver<TParent>;
  noOfImages?: StudyToNoOfImagesResolver<TParent>;
  facilityName?: StudyToFacilityNameResolver<TParent>;
  reportSignedOffDate?: StudyToReportSignedOffDateResolver<TParent>;
  supportRequestStatus?: StudyToSupportRequestStatusResolver<TParent>;
  tatLimitDate?: StudyToTatLimitDateResolver<TParent>;
}

export interface StudyTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToCanBeAssignedToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToAssignedToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToContrastPresentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToContrastTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToStudyDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToFacilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToReferringPhysiciansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToPriorStudiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToReportResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToAddendumsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToArriveTimeStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToAETitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToPatientNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToAssignedRadiologistNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToPatientDOBResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToPatientSexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToPatientIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToAccessionNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToStudyDescriptionStringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToStationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToModalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToStudyStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToReadTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToLateralityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToStudyDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToStudyPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToNoOfImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToFacilityNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToReportSignedOffDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToSupportRequestStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyToTatLimitDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssignOptionTypeResolver<TParent = any> {
  radiologist?: AssignOptionToRadiologistResolver<TParent>;
  assignPriority?: AssignOptionToAssignPriorityResolver<TParent>;
}

export interface AssignOptionToRadiologistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface AssignOptionToAssignPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLStudyDescriptionTypeResolver<TParent = any> {
  _id?: StudyDescriptionTo_idResolver<TParent>;
  name?: StudyDescriptionToNameResolver<TParent>;
  modality?: StudyDescriptionToModalityResolver<TParent>;
  contrast?: StudyDescriptionToContrastResolver<TParent>;
  reportTemplate?: StudyDescriptionToReportTemplateResolver<TParent>;
}

export interface StudyDescriptionTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyDescriptionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyDescriptionToModalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyDescriptionToContrastResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyDescriptionToReportTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLReportTemplateTypeResolver<TParent = any> {
  _id?: ReportTemplateTo_idResolver<TParent>;
  name?: ReportTemplateToNameResolver<TParent>;
  description?: ReportTemplateToDescriptionResolver<TParent>;
  template?: ReportTemplateToTemplateResolver<TParent>;
}

export interface ReportTemplateTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReportTemplateToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReportTemplateToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReportTemplateToTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLStudyNoteTypeResolver<TParent = any> {
  _id?: StudyNoteTo_idResolver<TParent>;
  type?: StudyNoteToTypeResolver<TParent>;
  title?: StudyNoteToTitleResolver<TParent>;
  messages?: StudyNoteToMessagesResolver<TParent>;
  resolved?: StudyNoteToResolvedResolver<TParent>;
}

export interface StudyNoteTo_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyNoteToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyNoteToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyNoteToMessagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyNoteToResolvedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLStudyNoteMessageTypeResolver<TParent = any> {
  createdBy?: StudyNoteMessageToCreatedByResolver<TParent>;
  createdTime?: StudyNoteMessageToCreatedTimeResolver<TParent>;
  text?: StudyNoteMessageToTextResolver<TParent>;
}

export interface StudyNoteMessageToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyNoteMessageToCreatedTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudyNoteMessageToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLReportTypeResolver<TParent = any> {
  content?: ReportToContentResolver<TParent>;
  signedOffDate?: ReportToSignedOffDateResolver<TParent>;
}

export interface ReportToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface ReportToSignedOffDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLStudySearchResultTypeResolver<TParent = any> {
  totalCount?: StudySearchResultToTotalCountResolver<TParent>;
  studies?: StudySearchResultToStudiesResolver<TParent>;
}

export interface StudySearchResultToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface StudySearchResultToStudiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  login?: MutationToLoginResolver<TParent>;
  logout?: MutationToLogoutResolver<TParent>;
  addWorklist?: MutationToAddWorklistResolver<TParent>;
  updateWorklist?: MutationToUpdateWorklistResolver<TParent>;
  updateWorklistDisplayOnTop?: MutationToUpdateWorklistDisplayOnTopResolver<TParent>;
  deleteWorklist?: MutationToDeleteWorklistResolver<TParent>;
  updateWorkspace?: MutationToUpdateWorkspaceResolver<TParent>;
  addStudyDescription?: MutationToAddStudyDescriptionResolver<TParent>;
  deleteStudyDescription?: MutationToDeleteStudyDescriptionResolver<TParent>;
  updateStudyDescription?: MutationToUpdateStudyDescriptionResolver<TParent>;
  addReportTemplate?: MutationToAddReportTemplateResolver<TParent>;
  updateReportTemplate?: MutationToUpdateReportTemplateResolver<TParent>;
  addUserRole?: MutationToAddUserRoleResolver<TParent>;
  updateUserRole?: MutationToUpdateUserRoleResolver<TParent>;
  addUser?: MutationToAddUserResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  updateUserRolePermissions?: MutationToUpdateUserRolePermissionsResolver<TParent>;
  deleteReportTemplate?: MutationToDeleteReportTemplateResolver<TParent>;
  addFacility?: MutationToAddFacilityResolver<TParent>;
  updateFacility?: MutationToUpdateFacilityResolver<TParent>;
  deleteFacility?: MutationToDeleteFacilityResolver<TParent>;
  addReferringPhysician?: MutationToAddReferringPhysicianResolver<TParent>;
  updateReferringPhysician?: MutationToUpdateReferringPhysicianResolver<TParent>;
  deleteReferringPhysician?: MutationToDeleteReferringPhysicianResolver<TParent>;
  updateFacilityTechConf?: MutationToUpdateFacilityTechConfResolver<TParent>;
  updateFacilityDicomDetails?: MutationToUpdateFacilityDicomDetailsResolver<TParent>;
  confirmStudy?: MutationToConfirmStudyResolver<TParent>;
  updateAssignPriorities?: MutationToUpdateAssignPrioritiesResolver<TParent>;
  assignStudiesToRadiologist?: MutationToAssignStudiesToRadiologistResolver<TParent>;
  updateAllowedFacilitiesForUser?: MutationToUpdateAllowedFacilitiesForUserResolver<TParent>;
  signOffReport?: MutationToSignOffReportResolver<TParent>;
  signOffAddendum?: MutationToSignOffAddendumResolver<TParent>;
  addStudyNote?: MutationToAddStudyNoteResolver<TParent>;
  addStudyNoteMessage?: MutationToAddStudyNoteMessageResolver<TParent>;
  updateStudyFacility?: MutationToUpdateStudyFacilityResolver<TParent>;
}

export interface MutationToLoginArgs {
  email: string;
  password: string;
}
export interface MutationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLoginArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLogoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddWorklistArgs {
  name: string;
  description: string;
  sorting: Array<GQLSortInput | null>;
  columns: Array<GQLColumnInput | null>;
}
export interface MutationToAddWorklistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddWorklistArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateWorklistArgs {
  worklistId: GQLObjectId;
  sorting: Array<GQLSortInput | null>;
  columns: Array<GQLColumnInput | null>;
}
export interface MutationToUpdateWorklistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateWorklistArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateWorklistDisplayOnTopArgs {
  worklistId: GQLObjectId;
  displayOnTop: boolean;
}
export interface MutationToUpdateWorklistDisplayOnTopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateWorklistDisplayOnTopArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteWorklistArgs {
  worklistId: GQLObjectId;
}
export interface MutationToDeleteWorklistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteWorklistArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateWorkspaceArgs {
  workspaceId: GQLObjectId;
  layout: GQLJSON;
}
export interface MutationToUpdateWorkspaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateWorkspaceArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddStudyDescriptionArgs {
  name: string;
  modality: GQLModalityEnum;
  reportTemplateId?: GQLObjectId;
  contrast: GQLContrastEnum;
}
export interface MutationToAddStudyDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddStudyDescriptionArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteStudyDescriptionArgs {
  studyDescriptionId: GQLObjectId;
}
export interface MutationToDeleteStudyDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteStudyDescriptionArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateStudyDescriptionArgs {
  studyDescriptionId: GQLObjectId;
  name: string;
  modality: GQLModalityEnum;
  contrast: GQLContrastEnum;
  reportTemplateId?: GQLObjectId;
}
export interface MutationToUpdateStudyDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateStudyDescriptionArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddReportTemplateArgs {
  name: string;
  description: string;
  template: GQLJSON;
}
export interface MutationToAddReportTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddReportTemplateArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateReportTemplateArgs {
  reportTemplateId: GQLObjectId;
  name: string;
  description: string;
  template: GQLJSON;
}
export interface MutationToUpdateReportTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateReportTemplateArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddUserRoleArgs {
  name: string;
  description: string;
}
export interface MutationToAddUserRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddUserRoleArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserRoleArgs {
  userRoleId: GQLObjectId;
  name: string;
  description: string;
}
export interface MutationToUpdateUserRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserRoleArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddUserArgs {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  userRoleId: GQLObjectId;
}
export interface MutationToAddUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddUserArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserArgs {
  userId: GQLObjectId;
  email: string;
  firstName: string;
  lastName: string;
  password?: string;
  userRoleId: GQLObjectId;
}
export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserRolePermissionsArgs {
  userRolePermissions?: Array<GQLUserRolePermissionsInput | null>;
}
export interface MutationToUpdateUserRolePermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserRolePermissionsArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteReportTemplateArgs {
  reportTemplateId: GQLObjectId;
}
export interface MutationToDeleteReportTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteReportTemplateArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddFacilityArgs {
  institutionName: string;
  address: string;
  city: string;
  state: string;
  zip: string;
  websiteUrl: string;
  faxNumber: string;
  phoneNumber: string;
  email: string;
}
export interface MutationToAddFacilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddFacilityArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateFacilityArgs {
  facilityId: GQLObjectId;
  institutionName: string;
  address: string;
  city: string;
  state: string;
  zip: string;
  websiteUrl: string;
  faxNumber: string;
  phoneNumber: string;
  email: string;
}
export interface MutationToUpdateFacilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateFacilityArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteFacilityArgs {
  facilityId: GQLObjectId;
}
export interface MutationToDeleteFacilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteFacilityArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddReferringPhysicianArgs {
  facilityId: GQLObjectId;
  physicianUid: string;
  name: string;
  email: string;
  phone: string;
  fax: string;
  dicomValue: string;
}
export interface MutationToAddReferringPhysicianResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddReferringPhysicianArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateReferringPhysicianArgs {
  referringPhysicianId: GQLObjectId;
  physicianUid: string;
  name: string;
  email: string;
  phone: string;
  fax: string;
  dicomValue: string;
}
export interface MutationToUpdateReferringPhysicianResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateReferringPhysicianArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteReferringPhysicianArgs {
  referringPhysicianId: GQLObjectId;
}
export interface MutationToDeleteReferringPhysicianResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteReferringPhysicianArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateFacilityTechConfArgs {
  facilityId: GQLObjectId;
  contrastRequirements: Array<GQLContrastRequirementsInput | null>;
  readType: GQLReadTypeEnum;
  tatLimits: Array<GQLTATLimitInput>;
}
export interface MutationToUpdateFacilityTechConfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateFacilityTechConfArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateFacilityDicomDetailsArgs {
  facilityId: GQLObjectId;
  AETitle: string;
}
export interface MutationToUpdateFacilityDicomDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateFacilityDicomDetailsArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToConfirmStudyArgs {
  studyId: GQLObjectId;
  patientName: string;
  patientId: string;
  patientDOB: GQLDate;
  patientSex: string;
  studyDescriptionId: GQLObjectId;
  contrastPresent: GQLContrastPresentEnum;
  contrastType: string;
  studyPriority: GQLStudyPriorityEnum;
  laterality: GQLStudyLateralityEnum;
  readType: GQLReadTypeEnum;
  history: string;
  referringPhysicianIds: Array<GQLObjectId>;
}
export interface MutationToConfirmStudyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToConfirmStudyArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateAssignPrioritiesArgs {
  userId: GQLObjectId;
  assignPriorities: Array<GQLAssignPriorityInput | null>;
}
export interface MutationToUpdateAssignPrioritiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateAssignPrioritiesArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAssignStudiesToRadiologistArgs {
  radiologistId: GQLObjectId;
  studyIds: Array<GQLObjectId>;
}
export interface MutationToAssignStudiesToRadiologistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAssignStudiesToRadiologistArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateAllowedFacilitiesForUserArgs {
  userId: GQLObjectId;
  facilityIds: Array<GQLObjectId>;
}
export interface MutationToUpdateAllowedFacilitiesForUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateAllowedFacilitiesForUserArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSignOffReportArgs {
  studyId: GQLObjectId;
  content: GQLJSON;
}
export interface MutationToSignOffReportResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSignOffReportArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSignOffAddendumArgs {
  studyId: GQLObjectId;
  content: GQLJSON;
}
export interface MutationToSignOffAddendumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSignOffAddendumArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddStudyNoteArgs {
  studyId: GQLObjectId;
  title: string;
  text: string;
  type?: GQLNoteTypeEnum;
}
export interface MutationToAddStudyNoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddStudyNoteArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddStudyNoteMessageArgs {
  studyId: GQLObjectId;
  noteId: GQLObjectId;
  text: string;
  resolved?: boolean;
}
export interface MutationToAddStudyNoteMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddStudyNoteMessageArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateStudyFacilityArgs {
  studyIds: Array<GQLObjectId>;
  facilityId: GQLObjectId;
}
export interface MutationToUpdateStudyFacilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateStudyFacilityArgs, context: GQLContext, info: GraphQLResolveInfo): TResult;
}

          import { ObjectId } from 'mongodb';
          import { GQLContext } from '../utils/getGraphqlContext';
    